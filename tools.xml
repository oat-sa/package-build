<project name="TAO Tools" default="help">

	<target name="init">
		<fail unless="tao.root" message="missing property tao.root use -Dtao.root= " />
		<available file="${tao.root}/config/phing.properties" property="check.installed"/>
		<if>
			<equals arg1="${check.installed}" arg2="true"/>
			<then>
				<echo level="info" msg="Already setup" />
			</then>
			<else>
				<resolvepath propertyName="build.dir" file="${tao.root}/vendor/oat-sa/tao-build" />
				<property name="vendor.bin" value="${tao.root}/vendor/bin" />
				<property name="composer.bin" value="composer" />
				<propertyprompt propertyName="composer.bin" defaultValue="composer"
        			promptText="Enter your composer binary location" />
				<propertyprompt propertyName="backup.folder" defaultValue="${tao.root}/backup"
        			promptText="Enter your backup folder" />

				<exportproperties 
					targetfile="${tao.root}/config/phing.properties"
					disallowedPropertyPrefixes="host.,phing.,os.,php.,line.,env.,user.,			application.,project." />		
			</else>
		</if>
	</target>

	<property file="${tao.root}/config/phing.properties" />

	<target name="clean">
		<delete file="${tao.root}/config/phing.properties" />
	</target>

	

	<target name="help">
		<echo msg="Available Command : " />
		<exec executable="${vendor.bin}/phing" passthru="true">
			<arg value="-l" />
			<arg value="-f" />
			<arg value="${build.dir}/tools.xml" />

		</exec>
	</target>

	<target name="prepare">
		<gitclone repository="git@github.com:oat-sa/phing-task-tao.git" targetPath="./build/tasks" />
	</target>



	<target name="backup_db" description="Create a DB backup">
		<tstamp>
			<format property="TSTAMP" pattern="%Y%m%d_%H%M%S" />
		</tstamp>
		<echo msg="Backup db ${db.name}" />
		<mkdir dir="${backup.folder}" />
		<exec command="mysqldump -u${db.user} -p${db.pass} ${db.name} > ${backup.folder}/${db.name}${TSTAMP}.sql" />
		<tar destfile="${backup.folder}/${db.name}${TSTAMP}.tar.bz2" compression="bzip2">
			<fileset dir="${backup.folder}">
				<include name="${db.name}${TSTAMP}.sql" />
			</fileset>
		</tar>
		<delete file="${backup.folder}/${db.name}${TSTAMP}.sql" />
	</target>

	<target name="backup_data" description="Create backup folder data and config">
		<tstamp>
			<format property="TSTAMP" pattern="%Y%m%d_%H%M%S" />
		</tstamp>
		<echo msg="Backup folder config and data" />
		<mkdir dir="${backup.folder}" />
		<tar destfile="${backup.folder}/file_${TSTAMP}.tar.bz2" compression="bzip2">
			<fileset dir="${tao.root}">
				<include name="config/**" />
				<include name="data/**" />
				<exclude name="data/generis/cache/**" />
			</fileset>
		</tar>
	</target>


	<target name="empty_cache" description="Empty application cahce">
		<delete dir="${tao.root}/data/generis/cache/" includeemptydirs="true" />
		<mkdir dir="${tao.root}/data/generis/cache" />
	</target>

	<target name="enable_maintenance" description="Enable Maintenance Mode">

		<exec executable="sed">
			<arg value="-i" />
			<arg value="-r" />
			<arg value="s/^define\('SYS_READY', .*\);/define('SYS_READY', false);/g" />
			<arg path="${tao.root}/config/generis.conf.php" />
		</exec>
	</target>

	<target name="disable_maintenance" description="Disable Maintenance Mode">

		<exec executable="sed">
			<arg value="-i" />
			<arg value="-r" />
			<arg value="s/^define\('SYS_READY', .*\);/define('SYS_READY', true);/g" />
			<arg path="${tao.root}/config/generis.conf.php" />
		</exec>
	</target>


	<target name="composer_update" description="Update extensions and 3rd part lib using composer">
		<composer command="update" composer="${composer.bin}" >
			<arg value="--working-dir" />
			<arg path="${tao.root}" />
		</composer>
	</target>

	<target name="composer_install" description="Install extensions and 3rd part lib using composer">
		<composer command="install" composer="${composer.bin}" >
			<arg value="--working-dir" />
			<arg path="${tao.root}" />
		</composer>
	</target>

	<target name="extension_update" >
		<exec executable="php" passthru="true">
			<arg path="${tao.root}/tao/scripts/taoUpdate.php" />
		</exec>
	</target>

	<target name="platform_update" description="Update TAO extensions installation">
		<phingcall target="enable_maintenance" />
		<phingcall target="composer_update" />
		<phingcall target="extension_update" />
		<phingcall target="disable_maintenance" />
		
	</target>

	<!--
	<target name="taoinstall" description="Install TAO">
		<includepath classpath="build/tasks" />
		<taskdef name="taoinstall" classname="InstallTaoTask" />
		<typedef name="taoDbConfig" classname="TaoDbConfig" />
		<typedef name="generisConfig" classname="GenerisConfig" />
		<typedef name="taoConfig" classname="TaoConfig" />

		<echo msg="${basedir.resolved}" />
		<taoinstall taoPath="${basedir.resolved}">
			<taoConfig login="${tao.login}" pass="${tao.pass}">
				<taoDbConfig dbDriver="${db.driver}" dbHost="${db.host}" dbUser="${db.user}" dbPass="${db.pass}" dbName="${db.name}" />
				<generisConfig instanceName="dev" moduleUrl="${tao.url}" moduleNs="${tao.ns}" moduleMode="${tao.mode}" dataPath="${basedir.resolved}/data/" extensions="${tao.extensions}" />
			</taoConfig>
		</taoinstall>
	</target>

	<target name="install_mathjax" description="Install 3rd part lib mathjax">
		<exec command="resource/MathJax_Install_TAO_3x.sh ${basedir.resolved}" passthru="true" />
	</target>
	-->
	<target name="tag_one">
		<tstamp>
			<format property="TSTAMP" pattern="%Y%m%d_%H%M%S" />
		</tstamp>
		<if>
			<isset property="extension" />
			<then>
				<includepath classpath="task/tao/extension" />
				<taskdef name="extensionVersion" classname="ExtensionVersionTask" />

				<extensionVersion extension="${extension}" taoPath="${tao.root}" versionprop='version' />

				<if>
					<isset property="version" />
					<then>
						<echo msg="tag ext ${extension} with version v${version}" />
						<gitfetch repository="${tao.root}/${extension}" all="true" />
						<gittag repository="${tao.root}/${extension}" list="true" outputProperty="tags" pattern="v${version}" />
						<if>
							<equals arg1="${tags}" arg2="" />
							<then>
								<echo message="${tags}" />
								<gittag repository="${tao.root}/${extension}" name="v${version}" message="Automatic creation of tag ${version} at ${TSTAMP}" />
								<gitpush
				        			repository="${tao.root}/${extension}"
				        			tags="true"
				        			destination="origin" />
							</then>
							<else>
								<echo level="info" msg="tag v${version} already exists skip ${tags}" />
							</else>

						</if>
					</then>
					<else>
						<echo level="error" msg="version not set" />
					</else>
				</if>
			</then>
			<else>
				<echo level="error" msg="error try to call tag_one alone" />
			</else>
		</if>
	</target>


	<target name="tag_extensions" description="Tag any extension according to manigest version">
		<foreach list="${extensions.list}" param="extension" target="tag_one" />
	</target>

	<target name="show_available_extensions">
		<includepath classpath="task/tao/extension" />
		<taskdef name="extensionsList" classname="ExtensionsListTask" />
		<extensionsList taoPath="${tao.root}" />
	</target>

	<target name="prepare_develop_PR">
		<tstamp>
			<format property="TSTAMP" pattern="%Y%m%d_%H%M%S" />
		</tstamp>
		<if>
			<isset property="extension" />
			<then>

				<echo msg="Merge ext ${extension} with version v${version}" />
				<gitcheckout
		    		repository="${tao.root}/${extension}"
		    		branchname="develop" />
		    	<gitpull
				    repository="${tao.root}/${extension}"
				    source="origin" refspec="develop" />
				<exec  command='hub pull-request develop -m "Automactic merge develop into master" - b master' passthru="true" dir="${tao.root}/${extension}/"/> 


			</then>
			<else>
				<echo level="error" msg="error try to call prepare_develop_PR  with no extension" />
			</else>
		</if>
	</target>

</project>